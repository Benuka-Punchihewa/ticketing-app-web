/*!
 * radial
 * Copyright(c) 2011 Retro Mocha LLC <contact@retromocha.com>
 * MIT Licensed
 */

var http = require('http');

module.exports = {

  registry: {},

  registerServices: function(services) {
    for(var i = 0; i < services.length; i++) {
      var service = services[i];

      if(service.default) {
        this.registry['default'] = service;
      }

      if(service.services !== null) {

        for(var j = 0; j < service.services.length; j++) {

          if(this.registry[service.services[j]] == undefined) {
            this.registry[service.services[j]] = new Array();
          }

          this.registry[service.services[j]].push(service);
        }

      }
    }
  },

  getService: function(serviceName) {
    if(this.registry[serviceName] != null) {

      if(this.registry[serviceName].length > 1) {
        var index = Math.floor(Math.random() * this.registry[serviceName].length);
        return this.registry[serviceName][index];

      } else {
        return this.registry[serviceName][0];
      }

    } else {
      return this.registry.default;
    }
  },

  proxy: function(req, res) {
    var post_data = JSON.stringify({
      'method': req.body.method,
      'params': req.body.params
    });

    var strings = req.body.method.split('.');
    var service = strings[0];
    var action = strings[1];

    var endpoint = this.getService(service);

    var options = {
      host: endpoint.host,
      port: endpoint.port,
      path: endpoint.path,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': post_data.length
      }
    };

    var request = http.request(options, function(resp) {
      resp.setEncoding('utf8');
      resp.on('data', function(chunk) {
        res.send(chunk);
      });
    });

    request.write(post_data);
    request.end();

  }
}